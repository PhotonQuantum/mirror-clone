//! Ghcup source
//!
//! The mirroring of ghcup is split into four sources.
//!
//! `GhcupPackages` source provides a file list of all required packages for
//! ghcup hosted on haskell.org.
//! The snapshot is generated by parsing the latest ghcup version, fetch
//! its config, and capture all files located at downloads.haskell.org.
//!
//! `GhcupHLS` source provides HLS packages hosted on Github.
//!
//! `GhcupConfig` fetches ghcup config.
//!
//! `GhcupScript` fetches ghcup installation script.
//!
//! Do not forget to apply rewrite_pipe to `GhcupConfig` and `GhcupScript`.
//! You may want to merge four sources into one using `MergePipe`.

use structopt::StructOpt;

use crate::ghcup::hls::GhcupHLS;
use crate::ghcup::packages::GhcupPackages;
use crate::ghcup::script::GhcupScript;
use crate::ghcup::yaml::GhcupYaml;

mod hls;
mod packages;
mod parser;
mod script;
mod utils;
mod yaml;

#[derive(Debug, Clone, StructOpt)]
pub struct Ghcup {
    #[structopt(
        long,
        help = "Ghcup upstream",
        default_value = "https://gitlab.haskell.org/haskell/ghcup-hs/-/raw/master/"
    )]
    pub ghcup_base: String,
    #[structopt(long, default_value = "https://get-ghcup.haskell.org/")]
    pub script_url: String,
    #[structopt(long, help = "Include legacy versions of packages")]
    pub include_old_versions: bool,
    #[structopt(long, help = "mirror url for packages")]
    pub target_mirror: String,
}

impl Ghcup {
    pub fn get_script(&self) -> GhcupScript {
        GhcupScript {
            script_url: self.script_url.clone(),
            target_mirror: self.target_mirror.clone(),
        }
    }
    pub fn get_yaml(&self) -> GhcupYaml {
        GhcupYaml {
            ghcup_base: self.ghcup_base.clone(),
            target_mirror: self.target_mirror.clone(),
        }
    }
    pub fn get_packages(&self) -> GhcupPackages {
        GhcupPackages {
            ghcup_base: self.ghcup_base.clone(),
            include_old_versions: self.include_old_versions,
        }
    }
    pub fn get_hls(&self) -> GhcupHLS {
        GhcupHLS {
            ghcup_base: self.ghcup_base.clone(),
        }
    }
}
